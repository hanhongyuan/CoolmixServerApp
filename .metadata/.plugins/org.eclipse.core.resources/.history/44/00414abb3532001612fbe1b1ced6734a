package com.tellem.springjpa;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

// Imports ...

@Controller
public class UserController {

  /**
   * GET /create  --> Create a new user and save it in the database.
   */
  @RequestMapping("/create")
  @ResponseBody
  public String create(String email, String name, String password) {
    User user = null;
    try {
      user = new User(email, name, password);
      userDao.save(user);
    }
    catch (Exception ex) {
      return "Error creating the user: " + ex.toString();
    }
    return "User succesfully created! (id = " + user.getId() + ")";
  }
  
  /**
   * GET /delete  --> Delete the user having the passed id.
   */
  @RequestMapping("/delete")
  @ResponseBody
  public String delete(long id) {
    try {
      User user = new User(id);
      userDao.delete(user);
    }
    catch (Exception ex) {
      return "Error deleting the user:" + ex.toString();
    }
    return "User succesfully deleted!";
  }
  
  /**
   * GET /get-by-email  --> Return the id for the user having the passed
   * email.
   */
  @RequestMapping("/get-by-email")
  @ResponseBody
  public String getByEmail(String email) {
    String userId;
    try {
      User user = userDao.findByEmail(email);
      userId = String.valueOf(user.getId());
    }
    catch (Exception ex) {
      return "User not found";
    }
    return "The user id is: " + userId;
  }
  
  /**
   * GET /update  --> Update the email and the name for the user in the 
   * database having the passed id.
   */
  @RequestMapping("/update")
  @ResponseBody
  public String updateUser(long id, String email, String userName) {
    try {
      User user = userDao.findOne(id);
      user.setEmail(email);
      user.setUsername(userName);
      userDao.save(user);
    }
    catch (Exception ex) {
      return "Error updating the user: " + ex.toString();
    }
    return "User succesfully updated!";
  }
  
  /**
   * GET /get-all-by-email  --> Return the ids for the user having the passed
   * email.
   */
  @RequestMapping("/get-all-by-email")
  @ResponseBody
  public String getAllByEmail(String email) {
    String userList = "";
    try {
      List<User> users = userDao.findUsersByEmail(email);
      for (User user : users) {
    	  userList = userList + "," + user.getId();
      }
    }
    catch (Exception ex) {
      return "User not found";
    }
    return "The user emaillist is: " + userList;
  }

  @RequestMapping("/get-all-users")
  @ResponseBody
  public List<User> getAllUsers() {
	 List<User> users = null;  
    try {
      users = userDao.findAllByOrderByUsernameAsc();
    }
    catch (Exception ex) {
      return users;
    }
    return users;
  }

  // Private fields

  @Autowired
  private UserDao userDao;
  
}